@page "/ChatStandard"
@inject IChatService chatService
@inject IChatHistoryService historyService
@using ChatbotHistory.Models


@inject IJSRuntime JS

<div class="container mt-4">
    <div class="card shadow-sm border-0">
        <div class="card-header bg-primary text-white rounded-top">
            <h3 class="mb-0">🤖 AI ChatBot</h3>
        </div>
       
        @if (isLoading)
        {
            <div class="text-center mt-3">
                <div class="spinner-grow text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }

        <div class="card-body" style="height: 400px; overflow-y: auto;" id="chatContainer">
            @foreach (var message in messages)
            {
                <div class="d-flex align-items-start mb-3 @(message.Role == "user" ? "justify-content-end" : "justify-content-start")">
                    @if (message.Role != "user")
                    {
                        <img src="images/bot-avatar.png" class="rounded-circle me-2" width="40" height="40" />
                    }
                    <div class="p-3 rounded text-white"
                         style="max-width: 75%; background-color:@(message.Role == "user" ? "#0d6efd" : "#6c757d")">
                        <small><b>@(message.Role == "user" ? "You" : "Bot")</b></small><br />
                        @message.Content
                    </div>
                    @if (message.Role == "user")
                    {
                        <img src="images/user-avatar.png" class="rounded-circle ms-2" width="40" height="40" />
                    }
                </div>
            }
        </div>

        <div class="card-footer bg-light rounded-bottom">
            <div class="input-group">
                <textarea class="form-control" rows="2" placeholder="Ask anything..."
                          @bind="userInput" style="border-radius: 8px; resize: none;"></textarea>
                <button class="btn btn-primary" @onclick="SendMessage">Send</button>
            </div>
        </div>
        <div class="card-footer bg-light rounded-bottom">
            <button class="btn btn-outline-danger btn-sm mb-3" @onclick="ClearHistory">
                Clear History
            </button>
        </div>
      
    </div>
</div>


@code {
    private bool isLoading = false;
    private string userInput;

    private List<ChatMessage> messages = new();

    protected override async Task OnInitializedAsync()
    {
        messages = await historyService.LoadHistoryAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ScrollToBottom();
        }
    }

    private async Task SendMessage()
    {
        //Sintaks detail pada project lampiran
        if (string.IsNullOrWhiteSpace(userInput)) return;

        messages.Add(new ChatMessage { Role = "user", Content = userInput, 
            Timestamp = DateTime.Now });
        isLoading = true;
      

        await historyService.SaveHistoryAsync(messages);
        await InvokeAsync(StateHasChanged);
        await ScrollToBottom();

        try
        {
            var reply = await chatService.SendMessageAsync(messages);
            messages.Add(new ChatMessage { Role = "assistant", Content = reply, 
                Timestamp = DateTime.Now });
        }
        catch
        {
            messages.Add(new ChatMessage { Role = "assistant", Content = "Terjadi kesalahan.",
                Timestamp = DateTime.Now });
        }
        finally
        {
            isLoading = false;
            userInput = string.Empty;
            await historyService.SaveHistoryAsync(messages);
            await InvokeAsync(StateHasChanged);
            await ScrollToBottom();
        }
    }

  
   
    private async Task ScrollToBottom()
    {
        await Task.Delay(100);
        await JS.InvokeVoidAsync("scrollToBottom");
    }

    private async Task ClearHistory()
    {
        historyService.ClearHistory();
        messages.Clear();
        await InvokeAsync(StateHasChanged);
    }

    
}