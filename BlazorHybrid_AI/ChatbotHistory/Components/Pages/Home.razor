@page "/"
@inject IChatService chatService
@inject IChatHistoryService historyService
@using ChatbotHistory.Models
@using ChatbotHistory.Service
@inject IJSRuntime JS

<div class="chatbot-page">
    <!-- Header -->
    <div class="chatbot-header">
        <div class="header-container">
            <div class="header-content">
                <div class="bot-logo">
                    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none"
                         stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M12 8V4H8" />
                        <rect width="16" height="12" x="4" y="8" rx="2" />
                        <path d="M2 14h2" />
                        <path d="M20 14h2" />
                        <path d="M15 13v2" />
                        <path d="M9 13v2" />
                    </svg>
                </div>
                <div class="header-text">
                    <h1>AI ChatBot</h1>
                  
                </div>
            </div>
            <div class="header-actions">
               
                
                
                <button class="clear-btn" @onclick="ClearHistory" title="Clear chat history">
                  
                    Clear History
                </button>
            </div>
        </div>
    </div>

    <!-- Main Container -->
    <div class="chatbot-main">
        <!-- Chat Messages -->
        <div id="chatContainer" class="chat-container">
            @if (messages.Count == 0)
            {
                <div class="welcome-section">
                    <div class="welcome-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" viewBox="0 0 24 24" fill="none" 
                             stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M12 8V4H8" />
                            <rect width="16" height="12" x="4" y="8" rx="2" />
                            <path d="M2 14h2" />
                            <path d="M20 14h2" />
                            <path d="M15 13v2" />
                            <path d="M9 13v2" />
                        </svg>
                    </div>
                    <h3>Halo! 👋</h3>
                 
                </div>
            }
            else
            {
                @foreach (var message in messages)
                {
                    <div class="message-wrapper @(message.Role == "user" ? "user-message" : "bot-message") fade-in">
                        <div class="message-avatar">
                            @if (message.Role == "user")
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" />
                                    <circle cx="12" cy="7" r="4" />
                                </svg>
                            }
                            else
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M12 8V4H8" />
                                    <rect width="16" height="12" x="4" y="8" rx="2" />
                                    <path d="M2 14h2" />
                                    <path d="M20 14h2" />
                                    <path d="M15 13v2" />
                                    <path d="M9 13v2" />
                                </svg>
                            }
                        </div>
                        <div class="message-content">
                            <div class="chat-bubble">
                                <div class="message-text">@message.Content</div>
                            </div>
                            <div class="timestamp">@message.Timestamp.ToString("HH:mm")</div>
                        </div>
                    </div>
                }

                @if (isLoading)
                {
                    <div class="message-wrapper bot-message">
                        <div class="message-avatar">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
                                 stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M12 8V4H8" />
                                <rect width="16" height="12" x="4" y="8" rx="2" />
                                <path d="M2 14h2" />
                                <path d="M20 14h2" />
                                <path d="M15 13v2" />
                                <path d="M9 13v2" />
                            </svg>
                        </div>
                        <div class="message-content">
                            <div class="chat-bubble loading">
                                <div class="typing-dots">
                                    <span></span>
                                    <span></span>
                                    <span></span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            <div id="messagesEnd"></div>
        </div>

        <!-- Input Area -->
        <div class="input-section">
            <div class="input-container">
                <div class="input-wrapper">
                    <textarea @bind="userInput"
                              @bind:event="oninput"
                              placeholder="Ask Anything..."
                              class="message-input"
                              @onkeypress="HandleKeyPress"
                              rows="1"></textarea>
                    <button @onclick="SendMessage"
                            class="send-btn"
                            disabled="@(isLoading || string.IsNullOrWhiteSpace(userInput))"
                            title="Send message">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="m22 2-7 20-4-9-9-4Z" />
                            <path d="M22 2 11 13" />
                        </svg>
                    </button>
                </div>
               
            </div>
           
        </div>
    </div>
</div>

<style>
    * {
        box-sizing: border-box;
    }

    .chatbot-page {
        display: flex;
        flex-direction: column;
        height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    }

    /* ============= HEADER ============= */
    .chatbot-header {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        padding: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    .header-container {
        max-width: 900px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }

    .header-content {
        display: flex;
        align-items: center;
        gap: 1.5rem;
    }

    .bot-logo {
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        animation: float 3s ease-in-out infinite;
    }

    .header-text h1 {
        font-size: 1.8rem;
        font-weight: 700;
        color: #1a202c;
        margin: 0;
        letter-spacing: -0.5px;
    }

    .header-text p {
        color: #718096;
        font-size: 0.95rem;
        margin: 0.25rem 0 0 0;
    }

    .header-actions {
        display: flex;
        gap: 0.75rem;
    }

    .icon-btn {
        width: 44px;
        height: 44px;
        border: none;
        background: #f7fafc;
        color: #4a5568;
        border-radius: 12px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }

        .icon-btn:hover {
            background: #edf2f7;
            color: #667eea;
            transform: translateY(-2px);
        }

    /* ============= MAIN CONTAINER ============= */
    .chatbot-main {
        flex: 1;
        display: flex;
        flex-direction: column;
        max-width: 900px;
        margin: 0 auto;
        width: 100%;
        padding: 0 1.5rem;
    }

    /* ============= CHAT CONTAINER ============= */
    .chat-container {
       /*  flex: 1;
        overflow-y: auto;
        padding: 2rem 0;
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        scroll-behavior: smooth;
        min-height: 0; /* ✅ Penting agar scroll berfungsi */ */ flex: 1;
        overflow-y: auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
        gap: 15px;
        background: linear-gradient(to bottom, #ffffff 0%, #f8f9fa 100%);
    }

        .chat-container::-webkit-scrollbar {
            width: 8px;
        }

        .chat-container::-webkit-scrollbar-track {
            background: transparent;
        }

        .chat-container::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 10px;
        }

            .chat-container::-webkit-scrollbar-thumb:hover {
                background: rgba(255, 255, 255, 0.5);
            }

    /* Welcome Section */
    .welcome-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: 3rem 2rem;
        height: 100%;
    }

    .welcome-icon {
        width: 120px;
        height: 120px;
        background: white;
        border-radius: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #667eea;
        margin-bottom: 2rem;
        box-shadow: 0 10px 40px rgba(102, 126, 234, 0.3);
        animation: float 3s ease-in-out infinite;
    }

    .welcome-section h3 {
        font-size: 2rem;
        font-weight: 700;
        color: white;
        margin-bottom: 1rem;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .welcome-section p {
        color: rgba(255, 255, 255, 0.9);
        font-size: 1.05rem;
        margin-bottom: 2rem;
        max-width: 400px;
        line-height: 1.6;
    }

    .quick-prompts {
        width: 100%;
        max-width: 500px;
    }

    .prompt-label {
        color: rgba(255, 255, 255, 0.8);
        font-size: 0.9rem;
        font-weight: 600;
        margin-bottom: 1rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .prompts-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
    }

    .prompt-btn {
        background: white;
        border: none;
        border-radius: 12px;
        padding: 1.25rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        color: #333;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

        .prompt-btn:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        }

    .prompt-icon {
        font-size: 1.8rem;
    }

    /* Message Wrapper */
    .message-wrapper {
        display: flex;
        gap: 1rem;
        animation: slideIn 0.3s ease-out;
    }

        .message-wrapper.user-message {
            flex-direction: row-reverse;
        }

    .message-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        flex-shrink: 0;
    }

    .user-message .message-avatar {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .bot-message .message-avatar {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    }

    .message-content {
        max-width: 70%;
        display: flex;
        flex-direction: column;
    }

    .user-message .message-content {
        align-items: flex-end;
    }

    .bot-message .message-content {
        align-items: flex-start;
    }

    .chat-bubble {
        padding: 1rem 1.25rem;
        border-radius: 18px;
        line-height: 1.6;
        word-wrap: break-word;
    }

    .user-message .chat-bubble {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-bottom-right-radius: 4px;
        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
    }

    .bot-message .chat-bubble {
        background: white;
        color: #2d3748;
        border: 1px solid #e2e8f0;
        border-bottom-left-radius: 4px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .message-text {
        margin: 0;
    }

    .timestamp {
        font-size: 0.75rem;
        color: rgba(255, 255, 255, 0.7);
        margin-top: 0.5rem;
    }

    .bot-message .timestamp {
        color: #a0aec0;
    }

    /* Loading State */
    .chat-bubble.loading {
        background: white;
        color: #667eea;
        border: 1px solid #e2e8f0;
        border-bottom-left-radius: 4px;
    }

    .typing-dots {
        display: flex;
        gap: 4px;
        padding: 0.5rem 0;
    }

        .typing-dots span {
            width: 8px;
            height: 8px;
            background: #667eea;
            border-radius: 50%;
            animation: bounce 1.4s infinite ease-in-out;
        }

            .typing-dots span:nth-child(1) {
                animation-delay: -0.32s;
            }

            .typing-dots span:nth-child(2) {
                animation-delay: -0.16s;
            }

    /* ============= INPUT SECTION ============= */
    .input-section {
        padding-bottom: 2rem;
    }

    .input-container {
        margin-bottom: 1rem;
    }

    .input-wrapper {
        display: flex;
        gap: 0.75rem;
        background: white;
        border-radius: 16px;
        padding: 0.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        transition: all 0.3s ease;
    }

        .input-wrapper:focus-within {
            box-shadow: 0 8px 30px rgba(102, 126, 234, 0.3);
        }

    .message-input {
        flex: 1;
        border: none;
        outline: none;
        padding: 0.75rem;
        font-size: 1rem;
        resize: none;
        max-height: 150px;
        font-family: inherit;
        color: #2d3748;
    }

        .message-input::placeholder {
            color: #a0aec0;
        }

    .send-btn {
        width: 48px;
        height: 48px;
        border: none;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 12px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        flex-shrink: 0;
    }

        .send-btn:not(:disabled):hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }

        .send-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    .input-hint {
        text-align: center;
        margin-top: 0.75rem;
    }

        .input-hint small {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.85rem;
        }

        .input-hint kbd {
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 4px;
            padding: 2px 6px;
            font-family: monospace;
            font-size: 0.8rem;
            color: white;
        }

    .clear-btn {
        background: linear-gradient(135deg, #8F44FD, #4BA3FF); /* gradient seperti icon */
        border: none;
        color: white;
        padding: 0.8rem 1.5rem;
        border-radius: 16px;
        cursor: pointer;
        font-weight: 600;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

        .clear-btn:hover {
            transform: translateY(-2px) scale(1.02);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
        }
  
  

    /* ============= ANIMATIONS ============= */
    @@keyframes slideIn {
        from

    {
        opacity: 0;
        transform: translateY(10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    @@keyframes float {
        0%, 100%

    {
        transform: translateY(0);
    }

    50% {
        transform: translateY(-10px);
    }

    }

    @@keyframes bounce {
        0%, 80%, 100%

    {
        transform: scale(0);
    }

    40% {
        transform: scale(1);
    }

    }

    .fade-in {
        animation: slideIn 0.3s ease-out;
    }

    /* ============= RESPONSIVE ============= */
    @@media (max-width: 768px) {
        .chatbot-page

    {
        padding-bottom: 0;
    }

    .chatbot-header {
        padding: 1rem;
    }

    .header-container {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }

    .header-content {
        flex-direction: column;
        gap: 1rem;
    }

    .header-text h1 {
        font-size: 1.5rem;
    }

    .chatbot-main {
        padding: 0 1rem;
    }

    .message-content {
        max-width: 85%;
    }

    .prompts-grid {
        grid-template-columns: 1fr;
    }

    .welcome-section {
        padding: 2rem 1rem;
    }

       
    
    }
    
   
</style>

@code {
    private bool isLoading = false;
    private string userInput = string.Empty;
    private List<ChatMessage> messages = new();

    protected override async Task OnInitializedAsync()
    {
        messages = await historyService.LoadHistoryAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || isLoading == false)
        {
            await ScrollToBottom();
        }
    }

    private void SetMessage(string message)
    {
        userInput = message;
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput) || isLoading) return;

        messages.Add(new ChatMessage { Role = "user", Content = userInput, Timestamp = DateTime.Now });
        isLoading = true;
        userInput = string.Empty;
        await historyService.SaveHistoryAsync(messages);
        await InvokeAsync(StateHasChanged);
        await ScrollToBottom();

        try
        {
            var reply = await chatService.SendMessageAsync(messages);
            messages.Add(new ChatMessage { Role = "assistant", Content = reply, Timestamp = DateTime.Now });
        }
        catch
        {
            messages.Add(new ChatMessage { Role = "assistant", Content = "Terjadi kesalahan.", Timestamp = DateTime.Now });
        }
        finally
        {
            isLoading = false;
            await historyService.SaveHistoryAsync(messages);
            await InvokeAsync(StateHasChanged);
            await ScrollToBottom();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey && !isLoading)
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(100);
        await JS.InvokeVoidAsync("scrollToBottom");
    }

    private async Task ClearHistory()
    {
        if (await JS.InvokeAsync<bool>("confirm", "Yakin ingin menghapus riwayat chat?"))
        {
            historyService.ClearHistory();
            messages.Clear();
            await InvokeAsync(StateHasChanged);
        }
    }
}