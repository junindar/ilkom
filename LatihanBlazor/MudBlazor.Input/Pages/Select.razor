@page "/Select"

@using System.Globalization
@using System.Linq
<TitlePrompt Title="Select" />

<MudCard Outlined="true">
    <MudCardContent>
        <MudText>Basic</MudText>
        <div class="row">
            <div class="col-md-4">
                <MudSelect T="string" Label="Coffee" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@(" Cappuccino")" />
                    <MudSelectItem Value="@(" Cafe Latte")" />
                    <MudSelectItem Value="@(" Espresso")" />
                </MudSelect>
            </div>
            <div class="col-md-4">
                <MudSelect T="double" Label="Price" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem T="double" Value="4.50" />
                    <MudSelectItem T="double" Value="4.99" />
                    <MudSelectItem T="double" Value="3.60" />
                </MudSelect>
            </div>
            <div class="col-md-4">
                <MudSelect T="Pizza" Label="Pizza" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@(new Pizza("Cardinale"))" />
                    <MudSelectItem Value="@(new Pizza("Diavolo"))" />
                    <MudSelectItem Value="@(new Pizza("Margarita"))" />
                    <MudSelectItem Value="@(new Pizza("Spinaci"))" /> <MudSelectItem Value="@(new Pizza("Spinaci"))" />
                </MudSelect>
            </div>
        </div>

    </MudCardContent>


</MudCard>
<div class="row">
    <br />
</div>

<MudCard Outlined="true">
    <MudCardContent>
        <MudText>Using Select</MudText>
        <div class="row">
            <div class="col-md-4">
                <MudSelect @bind-Value="stringValue" Label="Select fast-food" HelperText="String" Placeholder="Please Select" AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary">
                    <MudSelectItem Value="@("Pizza")" Disabled="true">Pizza (Disabled)</MudSelectItem>
                    <MudSelectItem Value="@("Burger")">Burger</MudSelectItem>
                    <MudSelectItem Value="@("Hotdog")">Hot Dog</MudSelectItem>
                </MudSelect>
            </div>
            <div class="col-md-4">
                <MudSelect @bind-Value="enumValue" Label="Select drink" HelperText="Enum" 
                OpenIcon="@Icons.Material.Filled.LocalDrink" AdornmentColor="Color.Secondary">
                    @foreach (Drink item in Enum.GetValues(typeof(Drink)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div class="col-md-4">
                <MudSelect Placeholder="Select culture" @bind-Value="cultureValue" HelperText="CultureInfo" ToStringFunc="@convertFunc" CloseIcon="@Icons.Material.Filled.Flag" AdornmentColor="Color.Tertiary">
                    <MudSelectItem Value="@(CultureInfo.GetCultureInfo("en-US"))" />
                    <MudSelectItem Value="@(CultureInfo.GetCultureInfo("de-AT"))" />
                    <MudSelectItem Value="@(CultureInfo.GetCultureInfo("pt-BR"))" />
                    <MudSelectItem Value="@(CultureInfo.GetCultureInfo("zh-CN"))" />
                </MudSelect>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <MudText Typo="Typo.subtitle1" Class="mr-2">Selected values: </MudText>
                <MudChip>@(stringValue ?? "Select fast-food")</MudChip>
                <MudChip Color="Color.Primary">@enumValue</MudChip>
                <MudChip Color="Color.Secondary">@(cultureValue?.DisplayName ?? "Select culture")</MudChip>
            </div>

        </div>
    </MudCardContent>


</MudCard>
<div class="row">
    <br />
</div>


<MudCard Outlined="true">
    <MudCardContent>
        <MudText>Multiselect</MudText>
        <div class="row">
            <div class="col-md-12">
                <MudSelect T="string" Label="US States" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="options">
                    @foreach (var state in states)
                    {
                        <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
                    }
                </MudSelect>
            </div>
           
        </div>
        <div class="row">
            <div class="col-md-6">
                <MudText Typo="Typo.subtitle2">Value:</MudText>
                <MudText Typo="Typo.subtitle2">"</MudText>
                <MudText Typo="Typo.body2" Class="pl-4">@value</MudText>
                <MudText Typo="Typo.subtitle2">"</MudText>
            </div>
            <div class="col-md-6">
                <MudText Typo="Typo.subtitle2">SelectedValues: HashSet&lt;string&gt;</MudText>
                <MudText Typo="Typo.subtitle2">{</MudText>
                <MudText Typo="Typo.body2" Class="pl-4">@(string.Join(", ", options.Select(x=>$"\"{x}\"")))</MudText>
                <MudText Typo="Typo.subtitle2">}</MudText>

            </div>
        </div>
    </MudCardContent>


</MudCard>
<div class="row">
    <br />
</div>


    <MudCard Outlined="true">
        <MudCardContent>
            <MudText>Customized Selection Text</MudText>
            <div class="row">
                <div class="col-md-12">
                    <MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionTextChoice))" MultiSelection="true"
                        @bind-Value="value" @bind-SelectedValues="options" T="string" Label="US States" 
                        AdornmentIcon="@Icons.Material.Filled.Search" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var state in states)
                    {
                        <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
                    }
                </MudSelect>
              
            </div>
            <div class="col-md-12">
                <MudSwitch @bind-Checked="multiselectionTextChoice" Class="mud-width-full" Color="Color.Primary">MultiSelection Text choice</MudSwitch>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <MudText Typo="Typo.subtitle2">Value:</MudText>
                <MudText Typo="Typo.subtitle2">"</MudText>
                <MudText Typo="Typo.body2" Class="pl-4">@value</MudText>
                <MudText Typo="Typo.subtitle2">"</MudText>
            </div>
            <div class="col-md-6">
                <MudText Typo="Typo.subtitle2">SelectedValues: HashSet&lt;string&gt;</MudText>
                <MudText Typo="Typo.subtitle2">{</MudText>
                <MudText Typo="Typo.body2" Class="pl-4">@(string.Join(", ", options.Select(x => $"\"{x}\"")))</MudText>
                    <MudText Typo="Typo.subtitle2">}</MudText>

                </div>
            </div>
        </MudCardContent>


    </MudCard>
    <div class="row">
        <br />
    </div>

<MudCard Outlined="true">
    <MudCardContent>
        <MudText>Select All</MudText>
        <div class="row">
            <div class="col-md-12">
                <MudSelect T="string" MultiSelection="true" SelectAll="true" 
                    SelectAllText="Select all felines" HelperText="@value" 
                    @bind-Value="value" @bind-SelectedValues="options2"
                    MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" 
                        Label="Felines" AdornmentIcon="@Icons.Material.Filled.Search">
                    @foreach (var feline in felines)
                    {
                        <MudSelectItem T="string" Value="@feline">@feline</MudSelectItem>
                    }
                </MudSelect>
            </div>
           
        </div>
        <div class="row">
            <div class="col-md-6">
                <MudText Typo="Typo.subtitle2">Value:</MudText>
                <MudText Typo="Typo.subtitle2">"</MudText>
                <MudText Typo="Typo.body2" Class="pl-4">@value</MudText>
                <MudText Typo="Typo.subtitle2">"</MudText>
            </div>
            <div class="col-md-6">
                <MudText Typo="Typo.subtitle2">SelectedValues: HashSet&lt;string&gt;</MudText>
                <MudText Typo="Typo.subtitle2">{</MudText>
                <MudText Typo="Typo.body2" Class="pl-4">@(string.Join(", ", options2.Select(x=>$"\"{x}\"")))</MudText>
                <MudText Typo="Typo.subtitle2">}</MudText>

            </div>
        </div>
    </MudCardContent>


</MudCard>
<div class="row">
    <br />
</div>

@code {

   public class Pizza
    {
        public Pizza(string name)
        {
            Name = name;
        }

        public readonly string Name;



        // Implement this for the Pizza to display correctly in MudSelect
        public override string ToString() => Name;
    }

    private string stringValue { get; set; }
    private Drink enumValue { get; set; } = Drink.HotWater;
    public enum Drink { Tea, SparklingWater, SoftDrink, Cider, Beer, Wine, Moonshine, Wodka, Cola, GreeTea, FruitJuice, Lemonade, HotWater, SpringWater, IceWater,  }
    private CultureInfo cultureValue { get; set; }
    private Func<CultureInfo, string> convertFunc = ci => ci?.DisplayName;


    private string value { get; set; } = "Nothing selected";
    private IEnumerable<string> options { get; set; } = new HashSet<string>() { "Alaska" };

    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };


     //private string value { get; set; } = "Nothing selected";
    private IEnumerable<string> options2 { get; set; } = new HashSet<string>() { "Lion" };

   private  string[] felines =
    {
        "Jaguar", "Leopard", "Lion", "Lynx", "Panther", "Puma", "Tiger"
    };

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} feline{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
    }

    private string GetMultiSelectionTextChoice(List<string> selectedValues)
    {
        if (multiselectionTextChoice)
        {
            return $"Selected state{(selectedValues.Count > 1 ? "s" : "")}: {string.Join(", ", selectedValues.Select(x => x))}";
        }
        else
        {
            return $"{selectedValues.Count} state{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
        }
    }

    private bool multiselectionTextChoice;
}
