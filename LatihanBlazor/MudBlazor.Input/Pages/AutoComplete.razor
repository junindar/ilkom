@page "/AutoComplete"
@using MudBlazor.Input.Data.ViewModel
@using MudBlazor.Input.Data
@inject HttpClient httpClient
<TitlePrompt Title="Autocomplete" />

<MudCard Outlined="true">
    <MudCardContent>
        <MudText>Default</MudText>
        <div class="row">
            <div class="col-md-6">
                <MudAutocomplete T="string" Label="US States" @bind-Value="value1" SearchFunc="@Search1" ResetValueOnEmptyText="true" />
            </div>
            <div class="col-md-6">
                <MudAutocomplete T="string" Label="US States" @bind-Value="value2" SearchFunc="@Search2" ResetValueOnEmptyText="true"
                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
            </div>
        </div>
        <div class="row">
            <br />
        </div>
        <div class="row">
            <div class="col-md-6">
                <MudAutocomplete T="string" Label="US States" @bind-Value="value3"
                                 SearchFunc="@Search3" Margin="Margin.None"
                                 Variant="Variant.Outlined" ResetValueOnEmptyText="true" />
            </div>
            <div class="col-md-6">
             
            </div>
        </div>
       
        
     

    </MudCardContent>
</MudCard>
<div class="row">
    <br/>
</div>
<MudCard Outlined="true">
    <MudCardContent>
        <MudText>WebApi</MudText>
        <div class="row">
            <div class="col-md-5">
                <MudAutocomplete T="User" Label="User" @bind-Value="uservalue1" ResetValueOnEmptyText="true"
                                 SearchFunc="@SearchUser" ToStringFunc="@(e=> e==null?null : $"{e.name}")" />
            </div>
            <div class="col-md-7">
                <div class="row">
                    <div class="col-md-5">
                        <MudText Class="mb-n3" Typo="Typo.body2">
                            Values: <MudChip>@(uservalue1?.id ?? "Not selected")</MudChip>
                        </MudText>
                    </div>
                    <div class="col-md-7">
                        <MudText Class="mb-n3" Typo="Typo.body2">
                            Text: <MudChip>@(uservalue1?.name ?? "Not selected")</MudChip>
                        </MudText>
                    </div>
                </div>
               
            </div>
        </div>
       
    </MudCardContent>
</MudCard>

    @code {
        [Inject]
        public IUserRepository UserRepository { get; set; }
        private User uservalue1;
        public IEnumerable<User> Users { get; set; }

        protected override async Task OnInitializedAsync()
        {
            Users = (await UserRepository.GetAll()).ToList();
        }
        private string value1, value2, value3;
        private string[] states =
        {
            "Alabama", "Alaska", "American Samoa", "Arizona",
            "Arkansas", "California", "Colorado", "Connecticut",
            "Delaware", "District of Columbia", "Federated States of Micronesia",
            "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
            "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
            "Louisiana", "Maine", "Marshall Islands", "Maryland",
            "Massachusetts", "Michigan", "Minnesota", "Mississippi",
            "Missouri", "Montana", "Nebraska", "Nevada",
            "New Hampshire", "New Jersey", "New Mexico", "New York",
            "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
            "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
            "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
            "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
            "Washington", "West Virginia", "Wisconsin", "Wyoming",
        };

        private async Task<IEnumerable<string>> Search1(string value)
        {
            // In real life use an asynchronous function for fetching data from an api.
            await Task.Delay(5);

            // if text is null or empty, show complete list
            if (string.IsNullOrEmpty(value))
                return states;
            return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }

        private async Task<IEnumerable<string>> Search2(string value)
        {
            // In real life use an asynchronous function for fetching data from an api.
            await Task.Delay(5);

            // if text is null or empty, don't return values (drop-down will not open)
            if (string.IsNullOrEmpty(value))
                return new string[0];
            return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }

        private async Task<IEnumerable<User>> SearchUser(string value)
        {


            //  var result = (await UserRepository.GetAll()).ToList();
            if (string.IsNullOrEmpty(value))
                return Users;
            return Users.Where(x => x.name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }

        private async Task<IEnumerable<string>> Search3(string value)
        {
        // In real life use an asynchronous function for fetching data from an api.
            await Task.Delay(5);

        // if text is null or empty, show complete list
            if (string.IsNullOrEmpty(value))
                return states;
            return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }

      
    }
