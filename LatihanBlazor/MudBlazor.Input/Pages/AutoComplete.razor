@page "/AutoComplete"
@using MudBlazor.Input.Data.ViewModel
@using MudBlazor.Input.Data
@inject HttpClient httpClient
<TitlePrompt Title="Autocomplete" />

<MudCard Outlined="true">
    <MudCardContent>
        <MudText>Basic</MudText>
        <div class="row">
            <div class="col-md-6">
                <MudAutocomplete T="string" Label="States" @bind-Value="value1" SearchFunc="@Search1" ResetValueOnEmptyText="true" />
            </div>
            <div class="col-md-6">
                <MudAutocomplete T="string" Label="States" @bind-Value="value2" SearchFunc="@Search2" ResetValueOnEmptyText="true"
                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
            </div>
        </div>
        <div class="row">
            <br />
        </div>
        <div class="row">
            <div class="col-md-6">
                <MudAutocomplete T="string" Label="States" @bind-Value="value3"
                                 SearchFunc="@Search3" Margin="Margin.None"
                                 Variant="Variant.Outlined" ResetValueOnEmptyText="true" />
            </div>
            <div class="col-md-6">
            </div>
        </div>




    </MudCardContent>
</MudCard>
<div class="row">
    <br />
</div>
<MudCard Outlined="true">
    <MudCardContent>
        <MudText>WebApi</MudText>
       @* <div class="row">
            <div class="col-md-5">
                <MudAutocomplete T="User" Label="User" @bind-Value="uservalue" ResetValueOnEmptyText="true"
                                 SearchFunc="@SearchUser" ToStringFunc="@(e=> e==null?null : $"{e.name}")" />
            </div>
            <div class="col-md-7">
                <div class="row">
                    <div class="col-md-5">
                        <MudText Class="mb-n3" Typo="Typo.body2">
                            Values: <MudChip>@(uservalue?.id ?? "Not selected")</MudChip>
                            </MudText>
                        </div>
                        <div class="col-md-7">
                            <MudText Class="mb-n3" Typo="Typo.body2">
                                Text: <MudChip>@(uservalue?.name ?? "Not selected")</MudChip>
                            </MudText>
                        </div>
                    </div>

                </div>
            </div>*@

            <div class="row">
                <div class="col-md-5">
                    <MudAutocomplete T="Provinsi" Label="Provinsi" @bind-Value="provinsiValue" ResetValueOnEmptyText="true"
                                 SearchFunc="@SearchProvinsi" ToStringFunc="@(e=> e==null?null : $"{e.name}")" />
                </div>
                <div class="col-md-7">
                    <div class="row">
                        <div class="col-md-5">
                            <MudText Class="mb-n3" Typo="Typo.body2">
                                Values: <MudChip>@(uservalue?.id ?? "Not selected")</MudChip>
                            </MudText>
                        </div>
                        <div class="col-md-7">
                            <MudText Class="mb-n3" Typo="Typo.body2">
                                Text: <MudChip>@(uservalue?.name ?? "Not selected")</MudChip>
                            </MudText>
                        </div>
                    </div>

                </div>
            </div>

        </MudCardContent>
    </MudCard>

    @code {
    [Inject]
    public IUserRepository UserRepository { get; set; }
    private User uservalue;

    [Inject]
    public IProvinsiRepository ProvinsiRepository { get; set; }
    private Provinsi provinsiValue;

    private string value1, value2, value3;
    private string[] states =
    {
            "ACEH", "SUMATERA UTARA", "SUMATERA BARAT", "RIAU",
            "JAMBI", "SUMATERA SELATAN", "BENGKULU", "LAMPUNG",
            "KEPULAUAN BANGKA BELITUNG", "KEPULAUAN RIAU", "DKI JAKARTA",
            "JAWA BARAT", "JAWA TENGAH", "DI YOGYAKARTA", "JAWA TIMUR", "BANTEN",
            "BALI", "NUSA TENGGARA BARAT", "NUSA TENGGARA TIMUR", "KALIMANTAN BARAT", "KALIMANTAN TENGAH",
            "KALIMANTAN SELATAN", "KALIMANTAN TIMUR", "KALIMANTAN UTARA", "SULAWESI UTARA",
            "SULAWESI TENGAH", "SULAWESI SELATAN", "SULAWESI TENGGARA", "GORONTALO",
            "SULAWESI BARAT", "MALUKU", "MALUKU UTARA", "PAPUA BARAT",
            "PAPUA"
    };

    private async Task<IEnumerable<string>> Search1(string value)
    {

        await Task.Delay(5);


        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search3(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }



    private async Task<IEnumerable<Provinsi>> SearchProvinsi(string value)
    {

        var provinsi = (await ProvinsiRepository.GetAll()).ToList();
        if (string.IsNullOrEmpty(value)) return provinsi;

        return provinsi.Where(x => x.name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<User>> SearchUser(string value)
    {

        var user = (await UserRepository.GetAll()).ToList();
        if (string.IsNullOrEmpty(value)) return user;

        return user.Where(x => x.name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    }
