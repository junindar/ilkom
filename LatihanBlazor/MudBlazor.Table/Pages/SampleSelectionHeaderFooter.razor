@page "/SampleSelectionHeaderFooter"
@using MudBlazor.Table.Entity
@using MudBlazor.Table.Data



<TitlePrompt Title="Multi-Selection And Fixed header and footer" />

<MudText Inline="true">Selected items: @(selectedItems1==null ? "" : string.Join(", ", 
  selectedItems1.OrderBy(x=>x.BookID).Select(x=>x.BookID)))</MudText>

<MudTable Items="@Books" Hover="true" Loading="@_loading" @ref="table" MultiSelection="true"
          @bind-SelectedItems="selectedItems1" FixedHeader="true" FixedFooter="true" Height="400px"
          Filter="new Func<Book,bool>(FilterTable)" LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Daftar Buku</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.BookID)">Id Buku</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.Judul)">Judul</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.Penulis)">Penulis</MudTableSortLabel></MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Gambar">

            <img src="@($"images/{@context.Gambar}")" class="rounded-circle" width="100" height="100" />
        </MudTd>
        <MudTd DataLabel="BookID">@context.BookID</MudTd>
        <MudTd DataLabel="Judul">@context.Judul</MudTd>
        <MudTd DataLabel="Penulis">@context.Penulis</MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="pageSizeOptions" />
    </PagerContent>
    <FooterContent>
        <MudTd colspan="5">Select All</MudTd>
    </FooterContent>
</MudTable>

@code {

    private int[] pageSizeOptions = new int[] { 5, 10, 15 };
    private bool _loading;
 

    private HashSet<Book> selectedItems1 = new HashSet<Book>();

    private MudTable<Book> table;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {

        table.SetRowsPerPage(5);
        return base.OnAfterRenderAsync(firstRender);
    }
    [Inject]
    public IBookRepository BookRepository { get; set; }
    private IEnumerable<Book> Books = new List<Book>();


    protected override async Task OnInitializedAsync()
    {

        _loading = true;
        await Task.Delay(1000);
        Books = (await BookRepository.GetAllBooks()).ToList();
        _loading = false;
    }
    private string searchString = "";
    private bool FilterTable(Book book) => FilterFunc(book, searchString);

    private bool FilterFunc(Book book, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (book.Penulis.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (book.Judul.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}