@page "/SampleMultiGrouping"
@using MudBlazor.Table.Entity
@using MudBlazor.Table.Data

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

<TitlePrompt Title="Grouping" />

<MudTable Items="@Books" Hover="true" Loading="@_loading" @ref="table"
          Height="600px" GroupBy="@_groupDefinition" MultiSelection="_multiSelect"
          GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
          GroupFooterClass="mb-4"
          Filter="new Func<Book, bool>(FilterFunc1)" LoadingProgressColor="Color.Info">
    @*<ColGroup>

            <col />
            <col />
            <col />
            <col />
        </ColGroup>*@
    <ToolBarContent>
        <MudText Typo="Typo.h6">Daftar Buku</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x => x.BookID)">Id Buku</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x => x.Judul)">Judul</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x => x.Penulis)">Penulis</MudTableSortLabel></MudTh>

    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="5">@($"{context.GroupName}: {context.Key}")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="Gambar">

            <img src="@($"images/{@context.Gambar}")" class="rounded-circle" width="100" height="100" />
        </MudTd>
        <MudTd DataLabel="BookID">@context.BookID</MudTd>
        <MudTd DataLabel="Judul">@context.Judul</MudTd>
        <MudTd DataLabel="Penulis">@context.Penulis</MudTd>

    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">Number of Book: @context.Items.Count()</MudTh>
    </GroupFooterTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="pageSizeOptions" />
    </PagerContent>
</MudTable>
<MudSwitch @bind-Checked="_multiSelect" Color="Color.Primary">MultiSelect</MudSwitch>
<MudSwitch @bind-Checked="_groupDefinition.Expandable" Color="Color.Primary">Show Expandable</MudSwitch>
<MudSwitch @bind-Checked="_groupDefinition.InnerGroup.Expandable" Color="Color.Primary">Show Expandable (Child)</MudSwitch>
<MudSwitch @bind-Checked="_groupDefinition.IsInitiallyExpanded" Color="Color.Primary">Expand</MudSwitch>
<MudSwitch @bind-Checked="_groupDefinition.InnerGroup.IsInitiallyExpanded" Color="Color.Primary">Expand Child</MudSwitch>

@code {
    private bool _multiSelect = true;
    private int[] pageSizeOptions = new int[] { 5, 10, 15 };
    private bool _loading;
    private string searchString1 = "";

    private TableGroupDefinition<Book> _groupDefinition = new TableGroupDefinition<Book>
    {
        GroupName = "Category",
        Expandable = true,
        IsInitiallyExpanded = true,
        Selector = (e) => e.Category.NamaCategory,
        InnerGroup = new TableGroupDefinition<Book>()
        {
            GroupName = "Penerbit",
            Expandable = true,
            IsInitiallyExpanded = true,
            Selector = (e) => e.Penerbit
        }
    };

    private MudTable<Book> table;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {

        table.SetRowsPerPage(15);
        return base.OnAfterRenderAsync(firstRender);
    }
    [Inject]
    public IBookRepository BookRepository { get; set; }
    private IEnumerable<Book> Books = new List<Book>();


    protected override async Task OnInitializedAsync()
    {

        _loading = true;
        await Task.Delay(1000);
        Books = (await BookRepository.GetAllBooks()).ToList();
        _loading = false;
    }
    private bool FilterFunc1(Book book) => FilterFunc(book, searchString1);

    private bool FilterFunc(Book book, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (book.Penulis.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (book.Judul.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
